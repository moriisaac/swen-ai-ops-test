name: SWEN AIOps GitOps Pipeline

on:
  push:
    branches:
      - main
      - 'ai-recommendation/**'
  pull_request:
    branches:
      - main

env:
  TF_VERSION: '1.5.0'
  TF_ROOT: './infra/envs/prod'

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: |
          cd ${{ env.TF_ROOT }}
          terraform init -backend=false
      
      - name: Terraform Validate
        run: |
          cd ${{ env.TF_ROOT }}
          terraform validate
          terraform fmt -check -recursive

  policy-check:
    name: Policy Evaluation
    runs-on: ubuntu-latest
    outputs:
      auto_approve: ${{ steps.policy.outputs.auto_approve }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install requests
      
      - name: Policy Check
        id: policy
        run: |
          echo "Checking AI recommendation policy..."
          
          # Check if this is an AI recommendation branch
          if [[ "${{ github.ref }}" =~ refs/heads/ai-recommendation/.* ]]; then
            echo "AI recommendation branch detected"
            
            # Check for metadata file
            if [ -f "${{ env.TF_ROOT }}/ai-metadata.json" ]; then
              python3 ops/policy_gate.py
              POLICY_EXIT_CODE=$?
              
              if [ $POLICY_EXIT_CODE -eq 0 ]; then
                echo "AUTO-APPROVE: Change meets policy criteria"
                echo "auto_approve=true" >> $GITHUB_OUTPUT
              else
                echo "MANUAL-APPROVAL: Change requires human review"
                echo "auto_approve=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "No metadata found, defaulting to manual approval"
              echo "auto_approve=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Regular branch, proceeding with standard workflow"
            echo "auto_approve=false" >> $GITHUB_OUTPUT
          fi

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: |
          cd ${{ env.TF_ROOT }}
          terraform init
      
      - name: Terraform Plan
        run: |
          cd ${{ env.TF_ROOT }}
          terraform plan -out=tfplan
          terraform show -json tfplan > plan.json
          echo "=== Terraform Plan Summary ==="
          terraform show tfplan
      
      - name: Upload Plan Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            ${{ env.TF_ROOT }}/tfplan
            ${{ env.TF_ROOT }}/plan.json

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [plan, policy-check]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/ai-recommendation/')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Download Plan Artifacts
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_ROOT }}
      
      - name: Terraform Init
        run: |
          cd ${{ env.TF_ROOT }}
          terraform init
      
      - name: Terraform Apply
        run: |
          cd ${{ env.TF_ROOT }}
          if [ "${{ needs.policy-check.outputs.auto_approve }}" == "true" ]; then
            echo "Auto-applying approved AI recommendation..."
            terraform apply -auto-approve tfplan
          else
            echo "Manual approval required"
            terraform apply tfplan
          fi
      
      - name: Terraform Output
        run: |
          cd ${{ env.TF_ROOT }}
          terraform output -json > outputs.json
      
      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ env.TF_ROOT }}/outputs.json

  notify:
    name: Notify Dashboard
    runs-on: ubuntu-latest
    needs: [apply]
    if: always()
    steps:
      - name: Notify Dashboard
        run: |
          echo "Deployment completed for branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          
          # Send notification to dashboard API (if available)
          if [ -n "${{ secrets.DASHBOARD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DASHBOARD_WEBHOOK_URL }}/api/deployments" \
              -H "Content-Type: application/json" \
              -d "{
                \"branch\": \"${{ github.ref_name }}\",
                \"commit\": \"${{ github.sha }}\",
                \"status\": \"${{ job.status }}\",
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
              }"
          fi
